{"ast":null,"code":"import axios from 'axios';\nconst API_SERVER = `http://localhost:3000`;\nexport const createProject = async projectDetails => {\n  axios.defaults.withCredentials = true;\n  await axios.post(`${API_SERVER}/user/createProject`, projectDetails);\n};\nexport const login = async credential => {\n  axios.defaults.withCredentials = true;\n  const request = axios.post(`${API_SERVER}/auth/login`, {\n    username: credential.username,\n    password: credential.password,\n    withCredentials: true,\n    headers: {\n      crossDomain: true,\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response).catch(err => \"Authentication failed\");\n  return {\n    type: 'USER_LOGIN',\n    payload: request\n  };\n};\nexport const logout = () => {\n  axios.get(`${API_SERVER}/auth/logout`).then(response => {\n    console.log('RESPONSE: ', response);\n  }).catch(err => console.log(err));\n};\nexport const checkStatus = async () => {\n  let profile;\n  axios.defaults.withCredentials = true;\n  await axios.get(`${API_SERVER}`).then(res => {\n    profile = res;\n  });\n  return profile;\n};\nexport const updateProfile = async (userID, updates) => {\n  let profile;\n  axios.defaults.withCredentials = true;\n  await axios.put(`${API_SERVER}/user/${userID}`, updates).then(res => {\n    profile = res;\n  });\n  return profile;\n}; //this axios for get all the users from the server\n\nexport const getAllUsers = () => {\n  axios.get(`${API_SERVER}/find`).then(response => {\n    console.log(\"RESPONSE: \", response);\n    console.log(\"DATA: \", response.data);\n  }).catch(err => {\n    console.log(\"ERR: \", err);\n  });\n}; //this for new user\n\nexport const register = (newUserInfo = {\n  username: \"demo\",\n  password: \"demo\"\n}) => {\n  console.log('send API POST ');\n  axios.post(`${API_SERVER}/register`, newUserInfo).then(response => {\n    console.log('RESPONSE: ', response);\n    console.log('DATA: ', response.data); // HERE IS YOUR LOGIC\n  }).catch(err => {\n    console.log('ERR: ', err);\n  });\n};","map":{"version":3,"sources":["/Users/newowner/Desktop/Project3/frontend/src/components/ops/API.jsx"],"names":["axios","API_SERVER","createProject","projectDetails","defaults","withCredentials","post","login","credential","request","username","password","headers","crossDomain","then","response","catch","err","type","payload","logout","get","console","log","checkStatus","profile","res","updateProfile","userID","updates","put","getAllUsers","data","register","newUserInfo"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst API_SERVER = `http://localhost:3000`\n\nexport const createProject = async (projectDetails) => {\n  axios.defaults.withCredentials = true\n  await axios\n    .post(`${API_SERVER}/user/createProject`, projectDetails)\n}\n\n\nexport const login = async (credential) => {\n  axios.defaults.withCredentials = true\n  const request = axios\n    .post(`${API_SERVER}/auth/login`, {\n      username: credential.username,\n      password: credential.password,\n      withCredentials: true,\n      headers: { crossDomain: true, 'Content-Type': 'application/json' },\n    })\n    .then(response => response)\n    .catch((err)=> \"Authentication failed\")\n\n  return {\n    type: 'USER_LOGIN',\n    payload: request,\n  };\n}\n\n\nexport const logout = () => {\n  axios\n    .get(`${API_SERVER}/auth/logout`)\n    .then((response) => {\n      console.log('RESPONSE: ', response);\n    })\n    .catch((err) => console.log(err))\n}\n\n\nexport const checkStatus = async () => {\n  let profile;\n  axios.defaults.withCredentials = true\n  await axios.get(`${API_SERVER}`)\n    .then((res) => {\n      profile = res\n    })\n  return profile\n}\n\nexport const updateProfile = async (userID, updates) => {\n  let profile\n  axios.defaults.withCredentials = true\n  await axios.put(`${API_SERVER}/user/${userID}`, updates)\n    .then((res) => {\n      profile = res\n    })\n  return profile\n}\n\n//this axios for get all the users from the server\nexport const getAllUsers = () => {\n  axios\n    .get(`${API_SERVER}/find`)\n    .then((response) => {\n      console.log(\"RESPONSE: \", response);\n      console.log(\"DATA: \", response.data);\n    })\n    .catch((err) => {\n      console.log(\"ERR: \", err);\n    });\n};\n\n//this for new user\nexport const register = (newUserInfo = { username: \"demo\", password: \"demo\" }) => {\n  console.log('send API POST ');\n  axios\n    .post(`${API_SERVER}/register`, newUserInfo)\n    .then((response) => {\n      console.log('RESPONSE: ', response);\n      console.log('DATA: ', response.data);\n      // HERE IS YOUR LOGIC\n\n    })\n    .catch((err) => {\n      console.log('ERR: ', err);\n    });\n};"]},"metadata":{},"sourceType":"module"}